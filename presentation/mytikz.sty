\usepackage{tikz}
\usetikzlibrary{arrows,positioning,fit,shapes.multipart,decorations.pathmorphing,overlay-beamer-styles,petri, calc}

\tikzset{
    p1/.style={circle, draw, thick, minimum size=6mm, inner sep=0},
    p2/.style={rectangle, draw, thick, minimum size=6mm, inner sep=0},
    pre/.style = {<-, semithick, >=stealth', shorten <=1pt},
    post/.style= {->, semithick, >=stealth', shorten >=1pt},
    node distance=1cm,
    >=stealth',
    shorten >=1pt,
    ncolor/.style={fill=color#1},
    emph-edge-tree/.style={edge from parent/.append style={very thick,color#1}},
    emph-edge/.style={very thick, color#1, draw},
    %no-emph/.style={opacity=0},
    level/.style={sibling distance=3.5cm/#1},
    mytoken/.style={thick, double},
    tok/.style={alt=#1{mytoken}{}},
    eet/.style args={<#1>#2}{alt=<#1>{emph-edge-tree=#2}{}},
    ee/.style args={<#1>#2}{alt=<#1>{emph-edge=#2}{}},
    nc/.style args={<#1>#2}{alt=<#1>{ncolor=#2}{}},
    tok-here/.code={\IfTokenIsIn{#1}{\pgfkeysalso{mytoken}}{}},
    podd/.style=p1, peven/.style=p2
  }

\xdefinecolor{color1}{rgb}{1.0, 0, 0}
\xdefinecolor{color2}{rgb}{0, 0, 1.0}

\newcommand{\TokenIsIn}{}%
\newcommand{\settok}[1]{\xdef\TokenIsIn{#1}}
\newcommand{\IfTokenIsIn}[3]{\IfBeginWith{\TokenIsIn}{#1}{#2}{#3}}


\setbeamercovered{transparent}

\directlua{require('/Users/miheer/Dropbox/Thesis/presentation/stacker.lua')}
\directlua{require('/Users/miheer/Dropbox/Thesis/presentation/mean.lua')}

\newcommand{\animateStackedPath}[1]{%
    \directlua{animateStack(splitCommas(\luastring{#1}))}%
}

\newcommand{\animateMeanPath}[3][0.7]{%
    \begin{overlayarea}{#1\textwidth}{2cm}
        \directlua{CmdAnimateMeanPath(\luastring{#2}, \luastringN{#3})}%
    \end{overlayarea}
}

\newwrite\luadebug
\immediate\openout\luadebug luadebug.lua
\AtEndDocument{\immediate\closeout\luadebug}
\newcommand\directluadebug{\immediate\write\luadebug}

\newcommand{\animatepath}[1]{
    \foreach \x in {#1} {
            \only<.>{\settok{\x}}
            \uncover<+->{\x}
    }
}

\newcommand{\mystring}{} % initialize
\def\extendmystring#1#2{\xdef\mystring{#1\mystring#2}}
